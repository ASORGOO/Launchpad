<!--guitar hero launchpad/DDR launchpad-->
$(document).ready(function(){
    
    loadSounds(sound1Srcs, sounds1, 1);
    loadSounds(sound4Srcs, sounds4, 4);
    loadSounds(sound2Srcs, sounds2, 2);
    
    $(window).resize(function(){
        reformat();
    });
});

function loadSounds(srcArr, soundArr, chain){
    for(var i = 0; i < srcArr.length; i++){
        soundArr.push(null);
    }

    for(var i = 0; i < srcArr.length; i++){
        if(srcArr[i] == ""){
            checkLoaded();
        }
        else{
            $.ajax({
                type: "POST",
                url: "/get_asset_path",
                data: {file_name: srcArr[i], sindex: i, chain: chain},
                success: function(data, textStatus, jqXHR) {
                  //console.log(data);
                  // console.log(textStatus);
                  // console.log(jqXHR);
                  var tempi = parseInt(data.sindex);
                  soundArr[tempi] = new Howl({urls: [data.asset_path]});
                  checkLoaded();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.log("Error=" + errorThrown);
                }
            });
        }
    }
}

function checkLoaded(){
    numLoaded++;
    if(numLoaded == 4*12*numSoundPacks){
        combSounds = [sounds1, sounds4, sounds2];
        loadKeyboard();
    }
}

function loadKeyboard(){
    for(var i = 0; i < 4; i++){
        $(".buttons").append('<div class="button-row"></div>');
        for(var j = 0; j < 12; j++){
            var press = false;
            if(pressures[0].indexOf((i*12+j)) != -1)
                press = true;
            var str = String.fromCharCode(keyPairs[i*12+j]);
            if(keyPairs[i*12+j] == 13)
                str = "\\n"
            $(".button-row:last").append('<div class="button button-'+(i*12+j)+'" pressure="'+press+'" released="true">'+str+'</div>');
            $('.button-'+(i*12+j)+'').css("background-color", $('.button-'+(i*12+j)+'').attr("pressure") == "true" ? "lightgray" : "white");
        }
    }
    
    $(".soundPack").html("Sound Pack: "+curSound);
    
    reformat();
    
    $(".button").click(function(){
       $(this).attr("pressure", $(this).attr("pressure") == "false" ? "true" : "false");
       $(this).css("background-color", $(this).attr("pressure") == "true" ? "lightgray" : "white");
    });
    
    $(document).keydown(function(e){
        //console.log(e.keyCode);
        if(e.keyCode == 39){
            curSound = 1;
            $(".soundPack").html("Sound Pack: "+curSound);
            switchSoundPack();
        }
        else if(e.keyCode == 37){
            curSound = 0;
            $(".soundPack").html("Sound Pack: "+curSound);
            switchSoundPack();
        }
        else if(e.keyCode == 38){
            curSound = 2;
            $(".soundPack").html("Sound Pack: "+curSound);
            switchSoundPack();
        }
        else{
            //console.log(e.keyCode);
            if($(".button-"+(keyPairs.indexOf(e.keyCode))+"").attr("released") == "true" && combSounds[curSound][keyPairs.indexOf(e.keyCode)] != null)
                combSounds[curSound][keyPairs.indexOf(e.keyCode)].play();
            $(".button-"+(keyPairs.indexOf(e.keyCode))+"").attr("released","false");
            $(".button-"+(keyPairs.indexOf(e.keyCode))+"").css("background-color","rgb(255,160,0)");
        }
    });
    $(document).keyup(function(e){
        if($(".button-"+(keyPairs.indexOf(e.keyCode))+"").attr("pressure") == "true" && combSounds[curSound][keyPairs.indexOf(e.keyCode)] != null)
            combSounds[curSound][keyPairs.indexOf(e.keyCode)].stop();
        $(".button-"+(keyPairs.indexOf(e.keyCode))+"").attr("released","true");
        $(".button-"+(keyPairs.indexOf(e.keyCode))+"").css("background-color", $(".button-"+(keyPairs.indexOf(e.keyCode))+"").attr("pressure") == "true" ? "lightgray" : "white");
    });
    
    $("#play_button").click(function(){
        if(song_playing){
            $("#play_button").html("Play");
            song_playing = false;
        }
        else{
            playSong();
            $("#play_button").html("Pause");
        }
    });
    
}

function switchSoundPack(){
    for(var i = 0; i < 4; i++){
        for(var j = 0; j < 12; j++){
            var press = false;
            if(pressures[curSound].indexOf((i*12+j)) != -1)
                press = true;
            $('.button-'+(i*12+j)+'').attr("pressure", ""+press+"");
            $('.button-'+(i*12+j)+'').css("background-color", $('.button-'+(i*12+j)+'').attr("pressure") == "true" ? "lightgray" : "white");
        }
    }
}

function playSong(){
    setupSongInterval();
}

function setupSongInterval(){
    frame = 0;
    time = 0;
    indAt = 0;
    resolution = 50;
    intro_loop = 0;
    song_playing = true;
    startTime = new Date().getTime();
    
    setTimeout(songInterval, resolution);
}

function songInterval(){
    var stop = false;
    while(songIntro[indAt].p <= frame){
        if(songIntro[indAt].kc != -1)
            keyTap(songIntro[indAt].kc, songIntro[indAt].dn);
        indAt++;
        if(indAt >= songIntro.length){
            if(intro_loop > 6){
            stop = true;
                break;
            }
            else{
                indAt = 0;
                frame = -resolution;
                intro_loop++;
            }
        }
    }
    frame+=resolution;
    time+=resolution;
    diff = (new Date().getTime() - startTime) - time;
    if(!stop && song_playing)
        setTimeout(songInterval, (resolution - diff));
}

function keyTap(keycode, duration){
    $(document).trigger(jQuery.Event( 'keydown', { which: keyPairs[keycode], keyCode: keyPairs[keycode] } ));
    setTimeout(function(){
        $(document).trigger(jQuery.Event( 'keyup', { which: keyPairs[keycode], keyCode: keyPairs[keycode] } ));
    },duration);
}

function reformat(){
    $(".buttons").css("margin", "0");
    $(".buttons").css("margin","0 "+(($("body").innerWidth()-$(".buttons").width())/2)+"px");
}

keyPairs = [49,50,51,52,53,54,55,56,57,48,189,187,
            81,87,69,82,84,89,85,73,79,80,219,221,
            65,83,68,70,71,72,74,75,76,186,222,13,
            90,88,67,86,66,78,77,188,190,191,16,-1];
            
sound1Srcs = ["c1","a0", "a1", "a2", "a3", "b0", "b1", "b2", "b3", "b3","d8","d12",
              "c3","c5", "a5", "a6", "a7", "b4", "b5", "b6", "b7", "d5","d6","d4",
              "c2","c7", "a9", "a10","a11","b8", "b9", "b10","b11","d1","d0","d5",
              "c6","a12","a13","a14","a15","b12","b13","b14","b15","d3","d2","d1"];
              
pressure1 = [4,5,6,7,8,9,17,18,29,30,31,32,33,34,35,41,42];

sound4Srcs = ["c0", "c3", "a15","","",   "",   "",   "b15","","","","",
              "c4", "c7", "",   "","",   "",   "d6", "d3", "","","","",
              "c8", "c11","",   "","d12","d13","d14","d7", "","","","",
              "c12","c15","",   "","d8", "d9", "d10","d11","","","",""];
              
pressure4 = [19];

sound2Srcs = ["a13","a14","a15","c2", "c3", "b0", "b1", "b2", "b3", "b3","d8","d12",
              "c1", "",   "",   "c6", "c7", "b4", "b5", "b6", "b7", "d5","d6","d4",
              "c5", "c8", "c9", "c10","c11","b8", "b9", "b10","b11","d1","d0","d5",
              "",   "c12","c13","c14","c15","b12","b13","b14","b15","d3","d2","d1"];

pressure2 = [5,6,7,8,9,17,18,29,30,31,32,33,34,35,41,42];

pressures = [pressure1, pressure4, pressure2];
              
sounds1 = [];

sounds4 = [];

sounds2 = [];
    
combSounds = [];

curSound = 0;

intro_loop = 0;

song_playing = false;

numLoaded = 0;

numSoundPacks = 3;

songTimeout = null;

frame = 0;

time = 0;

resolution = 1;

startTime = 0;

songIntro = [{kc: 3, dn: 200, p: 0},
             {kc: 15, dn: 200, p: 150},
             {kc: 37, dn: 200, p: 150},
             {kc: 16, dn: 200, p: 550},
             {kc: 2, dn: 200, p: 800},
             {kc: 1, dn: 200, p: 950},
             {kc: 15, dn: 200, p: 950},
             {kc: 16, dn: 200, p: 1350},
             {kc: -1, dn: -1, p: 1550}
            ];